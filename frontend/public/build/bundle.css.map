{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Dashboard.svelte",
    "Dispositivo.svelte",
    "ListadoDispositivos.svelte",
    "LogsDispositivo.svelte",
    "Mapa.svelte",
    "MedicionesDispositivo.svelte",
    "NuevoDispositivo.svelte",
    "NoEncontrado.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Chart from \"svelte-frappe-charts\";\n    import Button, { Label, Icon } from \"@smui/button/bare.js\";\n    import { medicionesServicio } from \"../servicios/mediciones.servicio\";\n    import { onMount } from \"svelte\";\n    import \"@smui/button/bare.css\";\n      \n    // dato pasado al componente\n    export let id;\n\n    // datos obtenidos del backend\n    let mediciones;\n    let vLabels = [];\n    let vHumedad = [];\n    let vTemperatura = [];\n    let data;\n\n    onMount(async () => {\n        await medicionesServicio\n            .obtenerMediciones(id)\n            .then((respuesta) => respuesta.json())\n            .then((resultado) => (mediciones = resultado));\n\n        const options = {\n            hour: \"numeric\",\n            minute: \"numeric\",\n            second: \"numeric\",\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n        };\n        console.log(mediciones);\n        // series a usar\n        vTemperatura = Object.keys(mediciones).map(\n            (key) => mediciones[key].temperatura === undefined ? null : mediciones[key].temperatura\n        );\n        vHumedad = Object.keys(mediciones).map(\n            (key) => mediciones[key].humedad === undefined ? null : mediciones[key].humedad\n        );\n        vLabels = Object.keys(mediciones).map((key) => mediciones[key].tiempo);\n        // formateo de labels\n        for (var i= 0; i < vLabels.length; i++) {\n            vLabels[i] = new Date(vLabels[i]).toLocaleDateString(\"ES-es\", options);\n        }\n        \n        data = {\n            labels: vLabels,\n            datasets: [\n                {\n                    name: \"Temperatura\",\n                    values: vTemperatura,\n                },\n                {\n                    name: \"Humedad\",\n                    values: vHumedad,\n                },\n            ],\n        };\n    });\n\n    let referencia;\n    const exportar = () => referencia.exportChart();\n</script>\n\n<style>\n    h2 {\n        color: #ff3e00;\n        font-size: 2em;\n        font-weight: 100;\n    }\n</style>\n\n<main>\n    <h2>Dispositivo {id}</h2>\n    {#if data}\n        <Chart {data} type=\"line\" bind:this={referencia} />\n    {/if}\n    <Button on:click={exportar} variant=\"outlined\">\n        <Label>Exportar</Label>\n    </Button>\n    <a href=\"/\">\n        <Button variant=\"outlined\">\n            <Label>Mapa</Label>\n        </Button>\n    </a>\n    <a href=\"/dispositivos\">\n        <Button variant=\"outlined\">\n            <Label>Listado</Label>\n        </Button>\n    </a>\n</main>\n",
    "<script>\n\t// validar formulario, basado en: https://codechips.me/svelte-form-validation-with-yup/\n\n\timport { onMount } from \"svelte\";\n\timport Button, { Label, Icon } from \"@smui/button/bare.js\";\n\timport \"@smui/button/bare.css\";\n\n\timport { dispositivosServicio } from \"../servicios/dispositivos.servicio\";\n\timport { dispositivoEsquema } from \"../esquemas/dispositivos.esquema\";\n\timport { logsServicio } from \"../servicios/logs.servicio\";\n\n    const cliente = mqtt.connect(\"ws://:1883\");\n\n\t// dato pasado al componente\n    export let id;\n    \n    // topico de Mqtt\n    let topico = `${id}/cambio`;\n\n\t// datos obtenidos del backend\n\tlet dispositivo;\n\tlet datosLogs;\n\n\t// datos formulario\n\tlet valores = {};\n\tlet errores = {};\n\tlet estado = {};\n\n\tonMount(async () => {\n\t\tawait dispositivosServicio\n\t\t\t.obtenerDispositivo(id)\n\t\t\t.then((respuesta) => respuesta.json())\n\t\t\t.then((resultado) => (dispositivo = resultado));\n\n\t\tawait logsServicio\n\t\t\t.obtenerLogs(id)\n\t\t\t.then((respuesta) => respuesta.json())\n\t\t\t.then((resultado) => (datosLogs = resultado));\n\t\tconsole.log(datosLogs);\n\n\t\tif (datosLogs.length > 0) {\n\t\t\testado.ultimoEstado = datosLogs[0].estado;\n\t\t} else {\n\t\t\testado.ultimoEstado = \"Desactivado\";\n\t\t}\n\t\testado.dispositivoId = id;\n\t\tvalores.denominacion = dispositivo.denominacion;\n\t\tvalores.latitud = dispositivo.ubicacion.coordinates[1];\n\t\tvalores.longitud = dispositivo.ubicacion.coordinates[0];\n\t});\n\n\tconst capturarErrores = ({ inner }) => {\n\t\treturn inner.reduce((acc, err) => {\n\t\t\treturn { ...acc, [err.path]: err.message };\n\t\t}, {});\n\t};\n\n\tconst guardar = () => {\n\t\tdispositivoEsquema\n\t\t\t.validate(valores, { abortEarly: false })\n\t\t\t.then(() => {\n\t\t\t\tvalores.denominacion = valores.denominacion.toUpperCase();\n\t\t\t\tdispositivosServicio\n\t\t\t\t\t.modificarDispositivo(dispositivo.id, valores)\n\t\t\t\t\t.then(() => location.replace(\"/dispositivos\"));\n\t\t\t})\n\t\t\t.catch((err) => (errores = capturarErrores(err)));\n\t};\n\n    \n\t// Mqtt\n\t// al conectarse\n    cliente.on(\"connect\", () => {\n\t\tconsole.log(\"Conectado a servidor MQTT\");\n\t\tcliente.subscribe(\"#\");\n\t});\n\n\t// en caso de error al comenzar\n\tcliente.on(\"error\", (error) => {\n\t\tconsole.log(`Error al conectarse: ${error}`);\n\t});\n\n\t// cambio de estado\n\tasync function cambiar() {\n        let cambio;\n\t\tif (estado.ultimoEstado === \"Activado\") {\n            estado.ultimoEstado = \"Desactivado\";\n            cambio = 0;\n\t\t} else {\n            estado.ultimoEstado = \"Activado\";\n            cambio = 1;\n\t\t}\n\t\tconsole.log(\"cambio\");\n\t\t// uso websocket mediante mqtt.js (lado cliente)\n\t\tcliente.publish(topico, cambio, { qos: 2 }, function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(`Error al publicar ${topico}: ${err}`);\n\t\t\t}\n\t\t});\n\t\t// usando REST para base de datos\n\t\tlogsServicio\n\t\t\t.agregarLog(estado)\n\t\t\t.then(() => location.replace(`/dispositivos/${dispositivo.id}`));\n\t}\n</script>\n\n<style>\n\th2 {\n\t\tcolor: #ff3e00;\n\t\tfont-size: 2em;\n\t\tfont-weight: 100;\n\t}\n</style>\n\n<main>\n\t<h2>Dispositivo</h2>\n\n\t{#if dispositivo && estado}\n\t\t<p>Id <b>{dispositivo.id}</b></p>\n\t\t<form on:submit|preventDefault={guardar}>\n\t\t\t<label for=\"denominacion\">Denominación</label>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tid=\"denominacion\"\n\t\t\t\t\tname=\"denominacion\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tbind:value={valores.denominacion}\n\t\t\t\t\tplaceholder=\"denominación del dispositivo\" />\n\t\t\t\t{#if errores.denominacion}{errores.denominacion}{/if}\n\t\t\t</div>\n\t\t\t<label for=\"latitud\">Latitud</label>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tid=\"latitud\"\n\t\t\t\t\tname=\"latitud\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tbind:value={valores.latitud}\n\t\t\t\t\tplaceholder=\"latitud del dispositivo\" />\n\t\t\t\t{#if errores.latitud}{errores.latitud}{/if}\n\t\t\t</div>\n\t\t\t<label for=\"longitud\">Longitud</label>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tid=\"longitud\"\n\t\t\t\t\tname=\"longitud\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tbind:value={valores.longitud}\n\t\t\t\t\tplaceholder=\"longitud del dispositivo\" />\n\t\t\t\t{#if errores.longitud}{errores.longitud}{/if}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>Estado luz: {estado.ultimoEstado}</p>\n\t\t\t</div>\n\t\t\t<Button color=\"secondary\" variant=\"raised\" type=\"submit\">\n\t\t\t\tGuardar\n\t\t\t</Button>\n\t\t\t<a href=\"/dispositivos/{dispositivo.id}/mediciones\">\n\t\t\t\t<Button variant=\"raised\">Ver historial</Button>\n\t\t\t</a>\n\t\t\t<a href=\"/dispositivos/{dispositivo.id}/logs\">\n\t\t\t\t<Button variant=\"raised\">Ver logs</Button>\n\t\t\t</a>\n\t\t</form>\n\n\t\t<Button variant=\"raised\" on:click={() => cambiar()}>\n\t\t\tCambiar estado\n\t\t</Button>\n\t{/if}\n\n\t<hr />\n\t<a href=\"/\">\n\t\t<Button variant=\"outlined\">\n\t\t\t<Label>Mapa</Label>\n\t\t</Button>\n\t</a>\n\t<a href=\"/dispositivos\">\n\t\t<Button variant=\"outlined\">\n\t\t\t<Label>Listado</Label>\n\t\t</Button>\n\t</a>\n</main>\n",
    "<script>\n    import { onMount } from \"svelte\";\n    import DataTable, { Head, Body, Row, Cell } from \"@smui/data-table/bare.js\";\n    import \"@smui/data-table/bare.css\";\n    import Button, { Label, Icon } from \"@smui/button/bare.js\";\n    import \"@smui/button/bare.css\";\n\n    import { dispositivosServicio } from \"../servicios/dispositivos.servicio\";\n\n    let dispositivos = [];\n    let id;\n\n    onMount(async () => {\n        await dispositivosServicio\n            .listarDispositivos()\n            .then((respuesta) => respuesta.json())\n            .then((resultado) => (dispositivos = resultado));\n    });\n\n    async function eliminar(id) {\n        await dispositivosServicio.eliminarDispositivo(id);\n        await dispositivosServicio\n            .listarDispositivos()\n            .then((respuesta) => respuesta.json())\n            .then((resultado) => (dispositivos = resultado));\n    }\n</script>\n\n<style>\n    h2 {\n        color: #ff3e00;\n        font-size: 2em;\n        font-weight: 100;\n    }\n</style>\n\n<main>\n    <h2>Dispositivos</h2>\n    <a href=\"/\">\n        <Button variant=\"outlined\">\n            <Label>Mapa</Label>\n        </Button>\n    </a>\n    <a href=\"/dispositivos/nuevo\">\n        <Button variant=\"outlined\">\n            <Label>Nuevo dispositivo</Label>\n        </Button>\n    </a>\n    <br />\n    {#if dispositivos}\n        <DataTable table$aria-label=\"Listado de Dispositivos\">\n            <Head>\n                <Row>\n                    <Cell>Id dispositivo</Cell>\n                    <Cell>Denominación</Cell>\n                </Row>\n            </Head>\n            <Body>\n                {#each dispositivos as dispositivo}\n                    <Row>\n                        <Cell>{dispositivo.id}</Cell>\n                        <Cell>{dispositivo.denominacion}</Cell>\n                        <Cell>\n                            <a href=\"/dispositivos/{dispositivo.id}\">\n                                <Button color=\"secondary\" variant=\"raised\">\n                                    <Label>Editar</Label>\n                                </Button>\n                            </a>\n                        </Cell>\n                        <Cell>\n                            <Button\n                                on:click={() => eliminar(dispositivo.id)}\n                                variant=\"raised\">\n                                <Label>Eliminar</Label>\n                            </Button>\n                        </Cell>\n                        <Cell>\n                            <a href=\"/dispositivos/{dispositivo.id}/dashboard\">\n                                <Button variant=\"outlined\">\n                                    <Label>Dashboard</Label>\n                                </Button>\n                            </a>\n                        </Cell>\n                    </Row>\n                {/each}\n            </Body>\n        </DataTable>\n    {/if}\n</main>\n",
    "<script>\n    \n    import DataTable, { Head, Body, Row, Cell } from \"@smui/data-table/bare.js\";\n    import \"@smui/data-table/bare.css\";\n    import Button, { Label, Icon } from \"@smui/button/bare.js\";\n    import \"@smui/button/bare.css\";\n    import { logsServicio } from \"../servicios/logs.servicio\";\n    import { onMount } from \"svelte\";\n  \n    // dato pasado al componente\n    export let id;\n\n    // datos obtenidos del backend\n    let logs = [];\n\n\n    onMount(async () => {\n        await logsServicio\n            .obtenerLogs(id)\n            .then((respuesta) => respuesta.json())\n            .then((resultado) => (logs = resultado));        \n    });\n\n</script>\n\n<style>\n    h2 {\n        color: #ff3e00;\n        font-size: 2em;\n        font-weight: 100;\n    }\n</style>\n\n<main>\n    <a href=\"/dispositivos/{id}\">\n        <Button variant=\"outlined\">\n            <Label>Volver</Label>\n        </Button>\n    </a>\n    <hr />\n\n    <h2>Dispositivo</h2>\n\n    {#if logs}\n        <p>Id <b>{id}</b></p>\n    {/if}\n\n    <DataTable table$aria-label=\"Listado de Logs\">\n        <Head>\n            <Row>\n                <Cell>Momento</Cell>\n                <Cell>Estado</Cell>\n            </Row>\n        </Head>\n        <Body>\n            {#each logs as log}\n                <Row>\n                    <Cell>{log.tiempo}</Cell>\n                    <Cell>{log.estado}</Cell>\n                </Row>\n            {/each}\n        </Body>\n    </DataTable>\n    <hr />\n    <a href=\"/dispositivos/{id}\">\n        <Button variant=\"outlined\">\n            <Label>Volver</Label>\n        </Button>\n    </a>\n</main>\n",
    "<script>\n    import * as L from \"leaflet\";\n    import { onMount } from \"svelte\";\n    import Button, { Label, Icon } from \"@smui/button/bare.js\";\n    import \"@smui/button/bare.css\";\n\n    import { dispositivosServicio } from \"../servicios/dispositivos.servicio\";\n\n    // variable del mapa\n    let mapa;\n    // variable de dispositivos (para mostrar en el mapa)\n    let dispositivos = [];\n    let ubicaciones = [];\n    let centro;\n\n    onMount(async () => {\n        await dispositivosServicio\n            .listarDispositivos()\n            .then((respuesta) => respuesta.json())\n            .then((resultado) => (dispositivos = resultado));\n        await marcadores();\n    });\n\n    async function marcadores() {\n        if (dispositivos.length > 0) {\n            let coordenada0max = 0;\n            let coordenada0min = 0;\n            let coordenada1max = 0;\n            let coordenada1min = 0;\n            for (let i = 0; i < dispositivos.length; i++) {\n                ubicaciones.push([\n                    dispositivos[i].denominacion,\n                    dispositivos[i].ubicacion.coordinates[1],\n                    dispositivos[i].ubicacion.coordinates[0],\n                    dispositivos[i].id,\n                ]);\n                if (i === 0) {\n                    coordenada0max = dispositivos[i].ubicacion.coordinates[1];\n                    coordenada0min = dispositivos[i].ubicacion.coordinates[1];\n                    coordenada1max = dispositivos[i].ubicacion.coordinates[0];\n                    coordenada1min = dispositivos[i].ubicacion.coordinates[0];                    \n                } else {\n                    if (coordenada0max < dispositivos[i].ubicacion.coordinates[1]) {\n                        coordenada0max = dispositivos[i].ubicacion.coordinates[1];\n                    }\n                    if (coordenada0min > dispositivos[i].ubicacion.coordinates[1]) {\n                        coordenada0min = dispositivos[i].ubicacion.coordinates[1];\n                    }\n\n                    if (coordenada1max < dispositivos[i].ubicacion.coordinates[0]) {\n                        coordenada1max = dispositivos[i].ubicacion.coordinates[0];\n                    }\n                    if (coordenada1min > dispositivos[i].ubicacion.coordinates[0]) {\n                        coordenada1min = dispositivos[i].ubicacion.coordinates[0];\n                    }                    \n                }\n            }\n            centro = [\n                (coordenada0max + coordenada0min) / 2,\n                (coordenada1max + coordenada1min) / 2,\n            ];\n        }\n    }\n\n    function crearMapa(contenedor) {\n        console.log(centro);\n        let m = L.map(contenedor).setView([centro[0], centro[1]], 9);\n        L.tileLayer(\n            \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",\n            {\n                attribution: `&copy;<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>,\n          &copy;<a href=\"https://carto.com/attributions\" target=\"_blank\">CARTO</a>`,\n                subdomains: \"abcd\",\n                maxZoom: 14,\n            }\n        ).addTo(m);\n\n        return m;\n    }\n\n    function accionesMapa(contenedor) {\n        // creo mapa\n        mapa = crearMapa(contenedor);\n\n        for (let i = 0; i < ubicaciones.length; i++) {\n            var marker = new L.marker([ubicaciones[i][1], ubicaciones[i][2]])\n                .bindPopup(\n                    `${ubicaciones[i][0]} </br>\n                <a href=\"/dispositivos/${ubicaciones[i][3]}/dashboard\"> ver dashboard </a> </br>\n                <a href=\"/dispositivos/${ubicaciones[i][3]}\"> editarlo </a>`\n                )\n                .addTo(mapa);\n        }\n\n        return {\n            destroy: () => {\n                mapa.remove();\n            },\n        };\n    }\n</script>\n\n<style>\n    h2 {\n        color: #ff3e00;\n        font-size: 2em;\n        font-weight: 100;\n    }\n</style>\n\n<main>\n    <h2>Mapa de dispositivos</h2>\n\n    <a href=\"/dispositivos\">\n        <Button variant=\"outlined\">\n            <Label>Listado</Label>\n        </Button>\n    </a>\n    <a href=\"/dispositivos/nuevo\">\n        <Button variant=\"outlined\">\n            <Label>Nuevo dispositivo</Label>\n        </Button>\n    </a>\n\n    {#if centro && ubicaciones}\n        <div class=\"map\" style=\"height:400px;width:100%\" use:accionesMapa />\n    {/if}\n</main>\n",
    "<script>\n    import DataTable, { Head, Body, Row, Cell } from \"@smui/data-table/bare.js\";\n    import \"@smui/data-table/bare.css\";\n    import Button, { Label, Icon } from \"@smui/button/bare.js\";\n    import \"@smui/button/bare.css\";\n    import { medicionesServicio } from \"../servicios/mediciones.servicio\";\n    import { onMount } from \"svelte\";\n\n    // dato pasado al componente\n    export let id;\n\n    // datos obtenidos del backend\n    let mediciones = [];\n\n    onMount(async () => {\n        await medicionesServicio\n            .obtenerMediciones(id)\n            .then((respuesta) => respuesta.json())\n            .then((resultado) => (mediciones = resultado));\n    });\n</script>\n\n<style>\n    h2 {\n        color: #ff3e00;\n        font-size: 2em;\n        font-weight: 100;\n    }\n</style>\n\n<main>\n    <a href=\"/dispositivos/{id}\">\n        <Button variant=\"outlined\">\n            <Label>Volver</Label>\n        </Button>\n    </a>\n    <hr />\n\n    <h2>Dispositivo</h2>\n\n    {#if mediciones}\n        <p>Id <b>{id}</b></p>\n\n        <DataTable table$aria-label=\"Listado de Dispositivos\">\n            <Head>\n                <Row>\n                    <Cell>Momento</Cell>\n                    <Cell>Temperatura</Cell>\n                    <Cell>Humedad</Cell>\n                </Row>\n            </Head>\n            <Body>\n                {#each mediciones as medicion}\n                    <Row>\n                        <Cell>{medicion.tiempo}</Cell>\n                        <Cell>{medicion.temperatura}</Cell>\n                        <Cell>{medicion.humedad}</Cell>\n                    </Row>\n                     {/each}\n            </Body>\n        </DataTable>\n    {/if}\n    <hr />\n    <a href=\"/dispositivos/{id}\">\n        <Button variant=\"outlined\">\n            <Label>Volver</Label>\n        </Button>\n    </a>\n</main>\n",
    "<script>\n    // validar formulario, basado en: https://codechips.me/svelte-form-validation-with-yup/\n\n    import { onMount } from \"svelte\";\n    import Button, { Label, Icon } from \"@smui/button/bare.js\";\n    import \"@smui/button/bare.css\";\n\n    import { dispositivosServicio } from \"../servicios/dispositivos.servicio\";\n    import { dispositivoEsquema } from \"../esquemas/dispositivos.esquema\";\n\n    let dispositivo;\n\n    // datos formulario\n    let valores = {};\n    let errores = {};\n\n    onMount(async () => {\n        valores.denominacion = \"\";\n        valores.latitud = \"\";\n        valores.longitud = \"\";\n    });\n\n    const capturarErrores = ({ inner }) => {\n        return inner.reduce((acc, err) => {\n            return { ...acc, [err.path]: err.message };\n        }, {});\n    };\n\n    const guardar = () => {\n        dispositivoEsquema\n            .validate(valores, { abortEarly: false })\n            .then(() => {\n                valores.denominacion = valores.denominacion.toUpperCase();\n                dispositivosServicio.agregarDispositivo(valores).\n                then(() => location.replace(\"/dispositivos\") );\n                \n            })\n            .catch((err) => (errores = capturarErrores(err)));\n    };\n</script>\n\n<style>\n    h2 {\n        color: #ff3e00;\n        font-size: 2em;\n        font-weight: 100;\n    }\n</style>\n\n<main>\n    <h2>Dispositivo Nuevo</h2>\n\n    <form on:submit|preventDefault={guardar}>\n        <label for=\"denominacion\">Denominación</label>\n        <div>\n            <input\n                id=\"denominacion\"\n                name=\"denominacion\"\n                type=\"text\"\n                bind:value={valores.denominacion}\n                placeholder=\"denominación del dispositivo\" />\n            {#if errores.denominacion}{errores.denominacion}{/if}\n        </div>\n        <label for=\"latitud\">Latitud</label>\n        <div>\n            <input\n                id=\"latitud\"\n                name=\"latitud\"\n                type=\"text\"\n                bind:value={valores.latitud}\n                placeholder=\"latitud del dispositivo\" />\n            {#if errores.latitud}{errores.latitud}{/if}\n        </div>\n        <label for=\"longitud\">Longitud</label>\n        <div>\n            <input\n                id=\"longitud\"\n                name=\"longitud\"\n                type=\"text\"\n                bind:value={valores.longitud}\n                placeholder=\"longitud del dispositivo\" />\n            {#if errores.longitud}{errores.longitud}{/if}\n        </div>\n        <Button color=\"secondary\" variant=\"raised\" type=\"submit\">Guardar</Button>\n    </form>\n\n    <hr />\n    <a href=\"/\">\n        <Button variant=\"outlined\">\n            <Label>Mapa</Label>\n        </Button>\n    </a>\n    <a href=\"/dispositivos\">\n        <Button variant=\"outlined\">\n            <Label>Listado</Label>\n        </Button>\n    </a>\n</main>\n",
    "<script>\n    /*\n  import { registrar, rutaActiva } from \"./Ruteador.svelte\";\n\n  export let path = \"/*\";\n  export let componente = null;\n\n  registrar({ path, componente });\n  */\n</script>\n\n<style>\n    h2 {\n        color: #ff3e00;\n        text-transform: uppercase;\n        font-size: 4em;\n        font-weight: 100;\n    }\n</style>\n\n<main>\n    <!--\n  {#if $rutaActiva.path === path}\n    <svelte:component this={componente} />\n    <slot />\n  {/if}\n    -->\n    <h2>Lo siento.</h2>\n    <h2>Página no encontrada.</h2>\n    <a href=\"/\">Volver</a>\n</main>\n"
  ],
  "names": [],
  "mappings": "AAiEI,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACpB,CAAC;ACsCJ,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC;AClFE,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACpB,CAAC;ACPD,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACpB,CAAC;ACyED,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACpB,CAAC;ACpFD,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACpB,CAAC;ACeD,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACpB,CAAC;AClCD,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACpB,CAAC"
}